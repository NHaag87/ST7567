import falcon
import json
import numpy as np
from ST7567 import ST7567_LCD


class lcd_display_server:

    def __init__(self, lcd):
        self.lcd = lcd

    def _exception_response(request):
        def requester(self, req, resp):
            try:
               request(self, req, resp)
            except Exception as error:
                resp.text = '\n'.join(['Error:', 
                                        '', 
                                        f'{type(error).__name__}: {str(error)}'])
                resp.status = falcon.HTTP_400
        return requester

    @_exception_response
    def on_get_help(self, req, resp):
        resp.text = '\n'.join(['Commands:', 
                               '', 
                               'set_image_raw - POST with parameter \'image\' as list of 1024 uint8s',
                               'set_image_binary - POST with parameter \'image\' as list of 64*128 bools'])
        resp.status = falcon.HTTP_200
    
    @_exception_response
    def on_post_set_image_raw(self, req, resp):
        assert 'image' in req.media, 'Image not found'
        assert len(req.media['image']) == 128*64, 'Incorrect image size or format'
        
        image = req.media['image']

        image = np.array([int(n) for n in image], dtype=np.bool).reshape(64, 128)
        self.lcd.show_image_binary(image)

        resp.text = 'OK'

        resp.status = falcon.HTTP_200
            
        

    def on_get(self, req, resp):
        doc = {
            'images': [
                {
                    'href': '/images/1eaf6ef1-7f2d-4ecc-a8d5-6e8adba7cc0e.png'
                }
            ]
        }

        # Create a JSON representation of the resource
        resp.text = json.dumps(doc, ensure_ascii=False)

        # The following line can be omitted because 200 is the default
        # status returned by the framework, but it is included here to
        # illustrate how this may be overridden as needed.
        resp.status = falcon.HTTP_200




class image_writer:
    def __init__(self, display):
        self.display = display
        self.image = [0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x9F,0x1F,0x7F,0x7F,0x1F,0x9F,0x7F,0x3F,0xBF,0x3F,0x7F,0xBF,0x3F,0x3F,0xFF,0x3F,0x3F,0xBF,0x7F,0x3F,0xBF,0x3F,0x7F,0xBF,0x3F,0x3F,0xFF,0x3F,0x3F,0xBF,0x7F,0x3F,0xBF,0x3F,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFB,0xF8,0xF8,0xFB,0xFF,0xFC,0xF8,0xFB,0xF8,0xFC,0xEF,0xEE,0xE0,0xF3,0xF8,0xFE,0xFF,0xFC,0xF8,0xFB,0xF8,0xFC,0xEF,0xEE,0xE0,0xF3,0xF8,0xFE,0xFF,0xFC,0xF8,0xFB,0xF8,0xFC,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0x1F,0xD7,0x07,0x07,0xFF,0xDF,0xDF,0x17,0x17,0xFF,0xFF,0x3F,0x1F,0x5F,0x1F,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x1F,0x1F,0x5F,0x5F,0xFF,0x3F,0x1F,0xDF,0x9F,0xBF,0xF7,0x07,0x07,0xDF,0x1F,0x3F,0xFF,0x3F,0x1F,0x5F,0x1F,0x3F,0xFF,0xDF,0xDF,0x17,0x17,0xFF,0xFF,0x1F,0x0F,0xAF,0x8F,0x3F,0x7F,0x3F,0x1F,0x5F,0x1F,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFC,0xFD,0xFC,0xFC,0xFD,0xFD,0xFD,0xFC,0xFC,0xFD,0xFD,0xFE,0xFC,0xFD,0xFD,0xFD,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFD,0xFD,0xFD,0xFC,0xFC,0xFE,0xFE,0xFC,0xFD,0xFC,0xFE,0xFF,0xFC,0xFC,0xFF,0xFC,0xFC,0xFF,0xFE,0xFC,0xFD,0xFD,0xFD,0xFF,0xFD,0xFD,0xFC,0xFC,0xFD,0xFD,0xFC,0xFC,0xFF,0xFD,0xFC,0xFE,0xFE,0xFC,0xFD,0xFD,0xFD,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xEF,0x07,0x03,0xEB,0xEB,0xEF,0x0F,0x0F,0xFF,0x0F,0x0F,0xEF,0x0F,0x1F,0xEF,0x0F,0x1F,0xFB,0x03,0x03,0x1F,0x4F,0xEF,0xFF,0xEF,0x03,0x03,0xEF,0x6F,0x7F,0xEF,0xEF,0x0B,0x0B,0xFF,0xFF,0x1F,0x0F,0xEF,0x0F,0x1F,0xEF,0x0F,0x1F,0xEF,0x0F,0x1F,0xFF,0xEF,0xEF,0x0B,0x0B,0xFF,0xFF,0x1F,0x0F,0xAF,0x8F,0x9F,0xFF,0xEF,0x0F,0x1F,0xCF,0xEF,0xCF,0xEF,0x03,0x03,0xEF,0x6F,0x7F,0xFF,0x87,0x87,0xFF,0xFF,0xFF,0xFF,0x87,0x87,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFE,0xFE,0xFE,0xFE,0xFF,0xFF,0xFE,0xFE,0xFE,0xFE,0xFF,0xFE,0xFE,0xFF,0xFE,0xFE,0xFF,0xFE,0xFE,0xFF,0xFE,0xFE,0xFE,0xFF,0xFF,0xFE,0xFE,0xFE,0xFF,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFF,0xFE,0xFE,0xFE,0xFF,0xFF,0xFE,0xFE,0xFF,0xFE,0xFE,0xFF,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFF,0xFE,0xFE,0xFE,0xFE,0xFF,0xFE,0xFE,0xFE,0xFE,0xFF,0xFF,0xFF,0xFF,0xFE,0xFE,0xFE,0xFF,0xFF,0xFE,0xFE,0xFF,0xFF,0xFF,0xFF,0xFE,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x8F,0x07,0x77,0x0F,0x07,0xF7,0x8F,0x07,0x57,0x47,0x4F,0xFF,0x77,0x77,0x05,0x05,0x7F,0x7F,0x7D,0x7D,0x01,0x01,0x7F,0x7F,0x8F,0x07,0x57,0x47,0x4F,0xFF,0x77,0x07,0x0F,0x67,0xF7,0xE7,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x27,0x63,0x4B,0x0B,0x93,0xFF,0x8F,0x07,0x77,0x27,0xAF,0xFD,0x01,0x01,0xF7,0x07,0x0F,0xFF,0x8F,0x07,0x57,0x47,0x4F,0xFF,0x77,0x77,0x05,0x05,0x7F,0x7F,0x07,0x03,0xEB,0x63,0x0F,0x9F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFD,0xFD,0xFD,0xFC,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF]
        print(type(self.image[0]))
    
    def on_get(self, req, resp):
        self.display.show_image(self.image)
        # Create a JSON representation of the resource
        resp.text = 'OK'

        # The following line can be omitted because 200 is the default
        # status returned by the framework, but it is included here to
        # illustrate how this may be overridden as needed.
        resp.status = falcon.HTTP_200
    
    def on_post(self, req, resp):
        # Create a JSON representation of the resource

        #data = json.load(req.stream)

        try:
            image = req.media['image']
        except:
            resp.text = 'Image not found'
            resp.status = falcon.HTTP_400
            return

        if (len(image) == 128*64):
            image = np.array([int(n) for n in image], dtype=np.bool).reshape(64, 128)
            image = np.packbits((image).reshape((64,-1,8)).flatten())

            #np.fliplr.swapaxes(1,0)
            print(image)
            self.display.show_image(image.tolist())
            #self.display.show_image(self.image)
            resp.text = 'OK'

            resp.status = falcon.HTTP_200
        else:
            print('false length')
            resp.text = 'Wrong image format. Expected list of 1024 ints.'
            resp.status = falcon.HTTP_400
            


# Setup falcon app
app = falcon.App()

# Initialize LCD display
lcd = ST7567_LCD()
lcd.initialize()
lcd.clear()

# Initialize falcon server
display_server = lcd_display_server(lcd)
app.add_route('/help', display_server, suffix='help')
app.add_route('/set_image_raw', display_server, suffix='set_image_raw')


